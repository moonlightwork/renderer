// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: renderer.proto

/*
Package renderer is a generated protocol buffer package.

It is generated from these files:
	renderer.proto

It has these top-level messages:
	Request
	Response
*/
package renderer

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	URL string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorRenderer, []int{0} }

func (m *Request) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type Response struct {
	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Body       string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorRenderer, []int{1} }

func (m *Response) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Response) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "renderer.Request")
	proto.RegisterType((*Response)(nil), "renderer.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RendererService service

type RendererServiceClient interface {
	CheckHealth(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Render(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type rendererServiceClient struct {
	cc *grpc.ClientConn
}

func NewRendererServiceClient(cc *grpc.ClientConn) RendererServiceClient {
	return &rendererServiceClient{cc}
}

func (c *rendererServiceClient) CheckHealth(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/renderer.RendererService/CheckHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rendererServiceClient) Render(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/renderer.RendererService/Render", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RendererService service

type RendererServiceServer interface {
	CheckHealth(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	Render(context.Context, *Request) (*Response, error)
}

func RegisterRendererServiceServer(s *grpc.Server, srv RendererServiceServer) {
	s.RegisterService(&_RendererService_serviceDesc, srv)
}

func _RendererService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendererServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/renderer.RendererService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendererServiceServer).CheckHealth(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RendererService_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendererServiceServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/renderer.RendererService/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendererServiceServer).Render(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _RendererService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "renderer.RendererService",
	HandlerType: (*RendererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _RendererService_CheckHealth_Handler,
		},
		{
			MethodName: "Render",
			Handler:    _RendererService_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "renderer.proto",
}

func init() { proto.RegisterFile("renderer.proto", fileDescriptorRenderer) }

var fileDescriptorRenderer = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbd, 0x4e, 0xc3, 0x40,
	0x10, 0x84, 0x63, 0x02, 0x49, 0xd8, 0x48, 0x20, 0xb6, 0x40, 0xc1, 0x14, 0x41, 0x16, 0x05, 0x0d,
	0x67, 0x01, 0x0f, 0x10, 0x29, 0x11, 0x12, 0x05, 0xd5, 0x21, 0x1a, 0x1a, 0x14, 0xdb, 0xcb, 0x39,
	0xc2, 0xc9, 0x9a, 0xfb, 0x41, 0xca, 0x03, 0xf0, 0x9a, 0x14, 0x3c, 0x09, 0xf2, 0x5d, 0x62, 0x68,
	0xd2, 0xed, 0x7c, 0x1a, 0x8d, 0x66, 0x16, 0x8e, 0x34, 0xad, 0x0a, 0xd2, 0xa4, 0x45, 0xad, 0xd9,
	0x32, 0x0e, 0xb6, 0x3a, 0x3e, 0x57, 0xcc, 0xaa, 0xa2, 0xd4, 0xf3, 0xcc, 0xbd, 0xa5, 0xb4, 0xac,
	0xed, 0x3a, 0xd8, 0xe2, 0x6b, 0xb5, 0xb0, 0xa5, 0xcb, 0x44, 0xce, 0xcb, 0x54, 0xb1, 0xe2, 0x3f,
	0x57, 0xa3, 0xbc, 0xf0, 0x57, 0xb0, 0x27, 0x97, 0xd0, 0x97, 0xf4, 0xe1, 0xc8, 0x58, 0x3c, 0x83,
	0xae, 0xd3, 0xd5, 0x28, 0xba, 0x88, 0xae, 0x0e, 0xa7, 0xfd, 0x9f, 0xef, 0x71, 0xf7, 0x59, 0x3e,
	0xca, 0x86, 0x25, 0x13, 0x18, 0x48, 0x32, 0x35, 0xaf, 0x0c, 0xe1, 0x18, 0x86, 0xc6, 0xce, 0xad,
	0x33, 0xaf, 0x39, 0x17, 0xe4, 0xed, 0x07, 0x12, 0x02, 0x9a, 0x71, 0x41, 0x88, 0xb0, 0x9f, 0x71,
	0xb1, 0x1e, 0xed, 0x35, 0x41, 0xd2, 0xdf, 0xb7, 0x5f, 0x11, 0x1c, 0xcb, 0x4d, 0xff, 0x27, 0xd2,
	0x9f, 0x8b, 0x9c, 0x70, 0x02, 0xc3, 0x59, 0x49, 0xf9, 0xfb, 0x03, 0xcd, 0x2b, 0x5b, 0xe2, 0xa9,
	0x08, 0xb3, 0xc4, 0xb6, 0xb0, 0xb8, 0x6f, 0x66, 0xc5, 0x3b, 0x78, 0xd2, 0xc1, 0x1b, 0xe8, 0x85,
	0x4c, 0x3c, 0x11, 0xed, 0xb3, 0x36, 0x6b, 0x62, 0xfc, 0x8f, 0x42, 0xf5, 0xa4, 0x33, 0x85, 0x97,
	0xf6, 0x8d, 0x59, 0xcf, 0x07, 0xde, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x9d, 0xc4, 0x6b,
	0x69, 0x01, 0x00, 0x00,
}
